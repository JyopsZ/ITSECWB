<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Reservation</title>
    <link rel="stylesheet" href="../css/styles.css">
</head>

<body>
    <!-- Header section containing the title and navigation menu -->
    <header>
        <img src="../images/logo.png" id="logo">
        <h1>Edit Reservation</h1>
        <nav>
            <ul>
                <li><a href="/labtechView/LSubReservation">Back</a></li>
                <li><a href="../../labtechPage">Home</a></li>
            </ul>
        </nav>
    </header>

    <!-- Main content section for editing reservations -->
    <main>
        <section class="edit-reservation">
            {{#if error}}
                <p style="color: red;">{{error}}</p>
            {{/if}}
            
            {{#if success}}
                <p style="color: green;">{{success}}</p>
            {{/if}}
            <h2>Edit Your Reservation</h2>
            <form id="edit-reserveForm" action="/updateReservationLab" method="POST">
                <!-- Reservation ID input to fetch and edit specific reservation -->
                <label for="reservation-id">Reservation ID:</label>
                <input type="number" id="reservationid" name="reservationid" value="{{specificReserve.reservationID}}" readonly>

                <!-- Laboratory selection dropdown -->
                <label for="editlab">Select Laboratory:</label>
                <select id="editlab" name="editlab" value="{{specificReserve.labName}}"required>
                    <option value="lab1" >Lab Alpha</option>
                    <option value="lab2" >Lab Beta</option>
                    <option value="lab3" >Lab Charlie</option>
                </select>

                <!-- Date input for selecting the new date -->
                <label for="editdate">Select New Date:</label>
                <input type="date" id="editdate" name="editdate" value="{{specificReserve.date}}" required>

                <label for="edittime">Select Time:</label>
                <select id="edittime" name="edittime" value="{{specificReserve.time}}" required>
                    <option value="nine" >9:00 - 9:30 AM</option>
                    <option value="nineThirty" >9:30 - 10:00 AM</option>
                    <option value="ten" >10:00 - 10:30 AM</option>
                </select>

                <label for="editSeat">Select Seat:</label>
                <input type="text" id="editSeat" name="editSeat" value="{{specificReserve.seatPos}}">

                <!-- Submit button to update the reservation -->
                <button type="submit">Update Reservation</button>
            </form>
        </section>

    <script>
            document.addEventListener('DOMContentLoaded', function() {
                const form = document.getElementById('edit-reserveForm');
                const dateInput = document.getElementById('editdate');
                const seatInput = document.getElementById('editSeat');
                const labSelect = document.getElementById('editlab');

                // Validate seat format based on lab
                function validateSeat(lab, seat) {
                    const [row, col] = seat.split(',').map(Number);
                    
                    switch(lab) {
                        case 'lab1': // 5x5 grid
                            return row >= 1 && row <= 5 && col >= 1 && col <= 5;
                        case 'lab2': // 4x6 grid with exclusions
                            if (row < 1 || row > 4 || col < 1 || col > 6) return false;
                            if (row === 4 && (col === 3 || col === 4)) return false;
                            return true;
                        case 'lab3': // 3x8 grid with exclusions
                            if (row < 1 || row > 3 || col < 1 || col > 8) return false;
                            if ((row === 1 || row === 2 || row === 3) && (col === 3 || col === 6)) return false;
                            return true;
                        default:
                            return false;
                    }
                }

                form.addEventListener('submit', function(e) {
                    const date = dateInput.value;
                    const seat = seatInput.value;
                    const lab = labSelect.value;

                    // Validate date is not in the past
                    if (date && new Date(date) < new Date().setHours(0,0,0,0)) {
                        e.preventDefault();
                        
                        // Log invalid input
                        fetch('/logInvalidInput', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                field: 'date',
                                description: 'Date selected is in the past during reservation edit',
                                submittedValue: date
                            })
                        });
                        
                        alert('Invalid date selected.');
                        return;
                    }

                    // Validate seat format
                    if (!/^[1-9],[1-9]$/.test(seat)) {
                        e.preventDefault();
                        
                        // Log invalid input
                        fetch('/logInvalidInput', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                field: 'seat',
                                description: 'Invalid seat format during reservation edit',
                                submittedValue: seat
                            })
                        });
                        
                        alert('Please enter seat in format: row,column (e.g., 1,2)');
                        return;
                    }

                    // Invalid seat position
                    if (!validateSeat(lab, seat)) {
                        e.preventDefault();
        
                        // Log invalid input
                        fetch('/logInvalidInput', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                field: 'seat',
                                description: 'Invalid seat position for selected lab during reservation edit',
                                submittedValue: seat
                            })
                        });
                    
                        alert('Invalid seat position for the selected laboratory.');
                        return;
                    }
                });
            });
        </script>
        
    </main>

    <!-- Footer section with copyright information -->
    <footer>
        <p>&copy; 2024 LabLink. All rights reserved.</p>
    </footer>
</body>
</html>